PROCEDURE "LOAD_DISPOSITIONS_FOR_PROCESS" ( IN I_PROCESS_ID BIGINT )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN

-- DERIVE THE CONFIGURATION FROM PROCESS 
declare configurations NVARCHAR(100) array;
declare index_table NVARCHAR(100);
declare insert_sql nvarchar(1000);
declare insert_sql_fuzzy nvarchar(1000);
declare fuzzy_index_table NVARCHAR(100);

-- -
-- declare excluded integer;
-- declare ds_record_count integer;
declare ds_count integer;
declare report_ids NVARCHAR(100) array;
declare report_id NVARCHAR(100);
declare i INTEGER;
declare report_priority NVARCHAR(100);

declare disposition_type NVARCHAR(10);

disposition_type = 'KEYWORD';

-- declare JE_SQL NVARCHAR(1000);
-- -

T_CONFIG = SELECT  TR.CONFIGURATION_NAME FROM "CDS_DS.T_DS_PROCESSES" AS P INNER JOIN "CDS_DS.T_CONFIGURATIONS" AS TR ON P.CONFIGURATION_NAME = TR.CONFIGURATION_NAME  WHERE PRC_ID = :I_PROCESS_ID;    
configurations = array_agg(:t_config.configuration_name);  


ENTITIES = SELECT E.CONFIGURATION_NAME,E.ENTITY_GROUP FROM "CDS_DS.T_CONFIGURATIONS" AS E WHERE  E.CONFIGURATION_NAME = :configurations[1] AND ENTITY_GROUP <> '' AND ENTITY_GROUP IS NOT NULL ;
index_table = '$TA_'||:configurations[1]||'_INDEX';

--to do-- do a delete of all system generated dispositions incase of reload of process -- this needs to be developed as part of updating the process


-- insert all the dispositions from TA index table for the expenses selected in a process

-- INSERT_SQL = ' INSERT INTO "CDS_DS.T_DISPOSITIONS"( DISPOSITION_ID,"EXPENSE_KEY.REPORT_ID","EXPENSE_KEY.ALLOCATION_KEY",DISPOSITION_ENTITY,DISPOSITION_REASON,PRC_ID)
-- SELECT SYSUUID AS DISPOSITION_ID,TE."EXPENSE_KEY.REPORT_ID",TE."EXPENSE_KEY.ALLOCATION_KEY",C.ENTITY_GROUP,TE.TA_TOKEN,' ||:I_PROCESS_ID|| ' AS PRC_ID FROM (SELECT  I."EXPENSE_KEY.REPORT_ID",I."EXPENSE_KEY.ALLOCATION_KEY",I.TA_TYPE,I.TA_TOKEN  FROM "' ||:index_table|| '" AS I inner join "CDS_DS.V_PROC_EXPENSES" AS E ON I."EXPENSE_KEY.REPORT_ID" = E.REPORT_ID AND 
-- I."EXPENSE_KEY.ALLOCATION_KEY" = E.ALLOCATION_KEY   WHERE E.PRC_ID =' ||:I_PROCESS_ID||' ) AS TE INNER JOIN (SELECT E.CONFIGURATION_NAME,E.ENTITY_GROUP FROM "CDS_DS.T_CONFIGURATIONS" AS E WHERE  E.CONFIGURATION_NAME = '''||:configurations[1]||''' ) as C ON TE.TA_TYPE = C.ENTITY_GROUP'; 

-- report ids based on company code from JE

JE_SQL = SELECT UNIQUE_KEY FROM "CDS_DS.T_JOURNAL_ENTRY" AS J WHERE J.COMPANY_KEY IN 
(SELECT P.COMPANY_CODE FROM "CDS_DS.T_DS_PROCESSES" AS P WHERE PRC_ID = :I_PROCESS_ID);

-- only concur expenses with matching je unique key (report id)
-- unique key -> report id (V_PROC_EXPENSES)

-- INSERT_SQL = ' INSERT INTO "CDS_DS.T_DISPOSITIONS"( DISPOSITION_ID,"EXPENSE_KEY.REPORT_ID","EXPENSE_KEY.ALLOCATION_KEY",DISPOSITION_ENTITY,DISPOSITION_REASON,PRC_ID)
-- SELECT SYSUUID AS DISPOSITION_ID,TE."EXPENSE_KEY.REPORT_ID",TE."EXPENSE_KEY.ALLOCATION_KEY",C.ENTITY_GROUP,TE.TA_TOKEN,' ||:I_PROCESS_ID|| ' AS PRC_ID FROM 
-- (SELECT  I."EXPENSE_KEY.REPORT_ID",I."EXPENSE_KEY.ALLOCATION_KEY",I.TA_TYPE,I.TA_TOKEN  FROM "' ||:index_table|| '" AS I 
-- INNER JOIN "CDS_DS.V_PROC_EXPENSES" AS E ON I."EXPENSE_KEY.REPORT_ID" = E.REPORT_ID AND 
-- I."EXPENSE_KEY.ALLOCATION_KEY" = E.ALLOCATION_KEY   WHERE E.PRC_ID =' ||:I_PROCESS_ID||' ) AS TE 
-- INNER JOIN (SELECT E.CONFIGURATION_NAME,E.ENTITY_GROUP FROM "CDS_DS.T_CONFIGURATIONS" AS E WHERE  E.CONFIGURATION_NAME = '''||:configurations[1]||''' ) as C ON TE.TA_TYPE = C.ENTITY_GROUP'; 

-- INSERT_SQL = ' INSERT INTO "CDS_DS.T_DISPOSITIONS"( DISPOSITION_ID,"EXPENSE_KEY.REPORT_ID","EXPENSE_KEY.ALLOCATION_KEY",DISPOSITION_ENTITY,DISPOSITION_REASON,PRC_ID)
-- SELECT SYSUUID AS DISPOSITION_ID,TE."EXPENSE_KEY.REPORT_ID",TE."EXPENSE_KEY.ALLOCATION_KEY",C.ENTITY_GROUP,TE.TA_TOKEN,' ||:I_PROCESS_ID|| ' AS PRC_ID FROM 
-- (
-- 	SELECT  I."EXPENSE_KEY.REPORT_ID",I."EXPENSE_KEY.ALLOCATION_KEY",I.TA_TYPE,I.TA_TOKEN  FROM "' ||:index_table|| '" AS I 
-- 	INNER JOIN "CDS_DS.V_PROC_EXPENSES" AS E ON I."EXPENSE_KEY.REPORT_ID" = E.REPORT_ID AND I."EXPENSE_KEY.ALLOCATION_KEY" = E.ALLOCATION_KEY   
-- 	WHERE E.PRC_ID =' ||:I_PROCESS_ID||' 
-- ) AS TE 
-- INNER JOIN (
-- 	SELECT E.CONFIGURATION_NAME,E.ENTITY_GROUP FROM "CDS_DS.T_CONFIGURATIONS" AS E WHERE  E.CONFIGURATION_NAME = '''||:configurations[1]||''' 
-- ) as C ON TE.TA_TYPE = C.ENTITY_GROUP'; 
IF RECORD_COUNT(:ENTITIES) > 0 THEN
INSERT_SQL = ' INSERT INTO "CDS_DS.T_DISPOSITIONS"( DISPOSITION_ID,"EXPENSE_KEY.REPORT_ID","EXPENSE_KEY.ALLOCATION_KEY",DISPOSITION_ENTITY,DISPOSITION_REASON,PRC_ID, DISPOSITION_TYPE,"PRIORITY")
SELECT SYSUUID AS DISPOSITION_ID,TE."EXPENSE_KEY.REPORT_ID",TE."EXPENSE_KEY.ALLOCATION_KEY",C.ENTITY_GROUP,TE.TA_TOKEN,' ||:I_PROCESS_ID|| ' AS PRC_ID, ''' ||:disposition_type|| ''', ''High'' as PRIORITY FROM 
(
	SELECT distinct I."EXPENSE_KEY.REPORT_ID",I."EXPENSE_KEY.ALLOCATION_KEY",I.TA_TYPE,I.TA_TOKEN  FROM "' ||:index_table|| '" AS I 
	INNER JOIN "CDS_DS.V_JE_EXP_PROC" AS E ON I."EXPENSE_KEY.REPORT_ID" = E.REPORT_ID AND I."EXPENSE_KEY.ALLOCATION_KEY" = E.ALLOCATION_KEY 
	WHERE E.PRC_ID =' ||:I_PROCESS_ID||' 

) AS TE 
INNER JOIN (
	SELECT E.CONFIGURATION_NAME,E.ENTITY_GROUP FROM "CDS_DS.T_CONFIGURATIONS" AS E WHERE  E.CONFIGURATION_NAME = '''||:configurations[1]||''' 
) as C ON TE.TA_TYPE = C.ENTITY_GROUP'; 

-- Line 74-76
--	SELECT I."EXPENSE_KEY.REPORT_ID",I."EXPENSE_KEY.ALLOCATION_KEY",I.TA_TYPE,I.TA_TOKEN  FROM "' ||:index_table|| '" AS I 
--	INNER JOIN "CDS_DS.V_PROC_EXPENSES" AS E ON I."EXPENSE_KEY.REPORT_ID" = E.REPORT_ID AND I."EXPENSE_KEY.ALLOCATION_KEY" = E.ALLOCATION_KEY  
--	WHERE E.PRC_ID =' ||:I_PROCESS_ID||' 
--	AND E.REPORT_ID IN (SELECT UNIQUE_KEY FROM "CDS_DS.T_JOURNAL_ENTRY" AS J WHERE J.COMPANY_KEY IN (SELECT P.COMPANY_CODE FROM "CDS_DS.T_DS_PROCESSES" AS P WHERE PRC_ID = ' ||:I_PROCESS_ID||' ))


exec INSERT_SQL;

-- -
-- DS_STATUS will have 'excluded' if more than one token found
-- is the prc_id unique, or prc_id + report id???????
-- ::ROWCOUNT will also show affected rows, may check that instead of count
-- SELECT ::ROWCOUNT INTO ds_count FROM DUMMY;

-- get the rows that were actually changed, not just change all
-- set the priority of the report based on the priority of the dispositions of the items of a report 
i := 1;
t_report_ids = SELECT DISTINCT "EXPENSE_KEY.REPORT_ID" FROM "CDS_DS.T_DISPOSITIONS" WHERE PRC_ID = :I_PROCESS_ID ;
t_matching_entities = SELECT DISTINCT PRC_ID,"EXPENSE_KEY.REPORT_ID", DISPOSITION_ENTITY ,PRIORITY
 FROM "CDS_DS.T_DISPOSITIONS" WHERE PRC_ID = :I_PROCESS_ID  ; 
 
t_reports_status =  SELECT DISTINCT  PRC_ID ,"EXPENSE_KEY.REPORT_ID",PRIORITY ,STRing_AGG(DISPOSITION_ENTITY,'/' ) as MATCHING_ENTITIES 
 FROM :t_matching_entities WHERE PRC_ID = :I_PROCESS_ID GROUP BY PRC_ID,"EXPENSE_KEY.REPORT_ID","PRIORITY" ;
 
report_ids = array_agg(:t_report_ids."EXPENSE_KEY.REPORT_ID");
--FOR i IN 1..CARDINALITY(:report_ids) DO
	report_id = :report_ids[i];
/*	
	high_reports = select * from "CDS_DS.T_DISPOSITIONS" where REPORT_ID  = report_id AND process_id = :I_Process_id and priority = 'High'; 
	if (CARDINALITY(:high_reports) = 'High')
	{
	
		elseif (high_reports = 'Meduim')
		{
			elseif(report = 'Low'){ }
		}
	}*/
--	highs = select * from repirts 
INSERT INTO "CDS_DS.T_DS_STATUS" SELECT DISTINCT PRC_ID,"EXPENSE_KEY.REPORT_ID",'','SYSTEM_EXCLUDED',PRIORITY,'','',MATCHING_ENTITIES FROM :t_reports_status ;
--	UPSERT "CDS_DS.T_DS_STATUS" VALUES(:I_PROCESS_ID, :report_id, '', 'SYSTEM_EXCLUDED', 'High','','','') WHERE PRC_ID=:I_PROCESS_ID AND REPORT_ID=:report_id;
--	UPSERT "CDS_DS.T_DS_STATUS_ITEM" VALUES(:I_PROCESS_ID, :report_id, '', 'SYSTEM_EXCLUDED', 'High') WHERE PRC_ID=:I_PROCESS_ID AND REPORT_ID=:report_id;
--END FOR;

--- Set the status at the item level
INSERT INTO "CDS_DS.T_DS_STATUS_ITEM" select DISTINCT :I_PROCESS_ID, "EXPENSE_KEY.REPORT_ID","EXPENSE_KEY.ALLOCATION_KEY", '', 'SYSTEM_EXCLUDED', 'High','' FROM "CDS_DS.T_DISPOSITIONS"  WHERE PRC_ID=:I_PROCESS_ID ;

END IF;
-- -- SELECT COUNT(*) into ds_count FROM "CDS_DS.T_DISPOSITIONS" WHERE PRC_ID=:I_PROCESS_ID;
-- IF(ds_count > 0) THEN
-- 	UPDATE "CDS_DS.T_DS_STATUS" SET SYSTEM_STATUS = 'EXCLUDED' WHERE PRC_ID = :I_PROCESS_ID;
-- ELSE
-- 	UPDATE "CDS_DS.T_DS_STATUS" SET SYSTEM_STATUS = '' WHERE PRC_ID = :I_PROCESS_ID;
-- END IF;
-- -


--COMMENTING THIS OUT FOR NOW
-- fuzzy_index_table = :configurations[1]||'_FUZZY_INDEX';
-- -- insert all the dispositions from FUZZY index table for the expenses selected in a process
-- INSERT_SQL_FUZZY = ' INSERT INTO "CDS_DS.T_DISPOSITIONS"( DISPOSITION_ID,"EXPENSE_KEY.REPORT_ID","EXPENSE_KEY.ALLOCATION_KEY",DISPOSITION_ENTITY,DISPOSITION_REASON,PRC_ID,DISPOSITION_TYPE)
-- SELECT SYSUUID AS DISPOSITION_ID,TE."EXPENSE_KEY.REPORT_ID",TE."EXPENSE_KEY.ALLOCATION_KEY",C.ENTITY_GROUP,TE.TA_TOKEN,' ||:I_PROCESS_ID|| ' AS PRC_ID,DISPOSITION_TYPE FROM (SELECT  I."EXPENSE_KEY.REPORT_ID",I."EXPENSE_KEY.ALLOCATION_KEY",I.TA_TYPE,I.TA_TOKEN,I.DISPOSITION_TYPE  FROM "' ||:fuzzy_index_table|| '" AS I inner join "CDS_DS.V_PROC_EXPENSES" AS E ON I."EXPENSE_KEY.REPORT_ID" = E.REPORT_ID AND 
-- I."EXPENSE_KEY.ALLOCATION_KEY" = E.ALLOCATION_KEY   WHERE E.PRC_ID =' ||:I_PROCESS_ID||' ) AS TE INNER JOIN (SELECT E.CONFIGURATION_NAME,E.ENTITY_GROUP FROM "CDS_DS.T_CONFIGURATIONS" AS E WHERE  E.CONFIGURATION_NAME = '''||:configurations[1]||''' ) as C ON TE.TA_TYPE = C.ENTITY_GROUP'; 
-- exec :INSERT_SQL_FUZZY;
TAB_RULESET =  SELECT  TR.RULESET_NAME FROM "CDS_DS.T_DS_PROCESSES" AS P INNER JOIN "CDS_DS.T_CONFIGURATIONS" AS TR ON P.CONFIGURATION_NAME = TR.CONFIGURATION_NAME  WHERE PRC_ID = :I_PROCESS_ID AND TR.RULESET_NAME IS NOT NULL 
AND TR.RULESET_NAME <> ''; 

if RECORD_COUNT(:TAB_RULESET) > 0 
THEN
CALL LOAD_DISPOSITIONS_FOR_RULES(:I_PROCESS_ID);
END IF;

-- add the tracebility of configurations for a process
INSERT INTO "CDS_DS.T_PRC_CONFIGURATIONS" (PRC_ID,CONFIGURATION_NAME,ENTITY_GROUP,RULESET_NAME) SELECT :I_PROCESS_ID AS PRC_ID, TR.CONFIGURATION_NAME,TR.ENTITY_GROUP,TR.RULESET_NAME FROM "CDS_DS.T_DS_PROCESSES" AS P INNER JOIN "CDS_DS.T_CONFIGURATIONS" AS TR ON P.CONFIGURATION_NAME = TR.CONFIGURATION_NAME  WHERE PRC_ID = :I_PROCESS_ID;

--INSERT INTO "CDS_DS.T_PRC_ENTITIES"(PRC_ID,ENTITY_GROUP,ENTITY_NAME) SELECT :I_PROCESS_ID AS PRC_ID,ENTITY_GROUP,ENTITY_NAME FROM "CDS_DS.T_ENTITIES" WHERE ENTITY_GROUP IN (SELECT TR.ENTITY_GROUP FROM "CDS_DS.T_DS_PROCESSES" AS P INNER JOIN "CDS_DS.T_CONFIGURATIONS" AS TR ON P.CONFIGURATION_NAME = TR.CONFIGURATION_NAME  WHERE PRC_ID = :I_PROCESS_ID );
LT_ENTITIES = SELECT :I_PROCESS_ID AS PRC_ID,ENTITY_GROUP,ENTITY_NAME FROM "CDS_DS.T_ENTITIES" WHERE ENTITY_GROUP IN (SELECT TR.ENTITY_GROUP FROM "CDS_DS.T_DS_PROCESSES" AS P INNER JOIN "CDS_DS.T_CONFIGURATIONS" AS TR ON P.CONFIGURATION_NAME = TR.CONFIGURATION_NAME  WHERE PRC_ID = :I_PROCESS_ID );
INSERT INTO "CDS_DS.T_PRC_ENTITIES"(PRC_ID,ENTITY_GROUP,ENTITY_NAME) SELECT PRC_ID,ENTITY_GROUP,STRING_AGG(ENTITY_NAME,'|') AS ENTITY_NAME FROM :LT_ENTITIES GROUP BY PRC_ID,ENTITY_GROUP;
INSERT INTO "CDS_DS.T_PRC_RULESETS"(PRC_ID,RULESET_NAME,RULE_NAME) SELECT :I_PROCESS_ID AS PRC_ID,RULESET_NAME,RULE_NAME FROM "CDS_DS.T_RULESETS" WHERE RULESET_NAME IN (SELECT TR.RULESET_NAME FROM "CDS_DS.T_DS_PROCESSES" AS P INNER JOIN "CDS_DS.T_CONFIGURATIONS" AS TR ON P.CONFIGURATION_NAME = TR.CONFIGURATION_NAME  WHERE PRC_ID = :I_PROCESS_ID );

TAB_RULESET =  SELECT  TR.RULESET_NAME FROM "CDS_DS.T_DS_PROCESSES" AS P INNER JOIN "CDS_DS.T_CONFIGURATIONS" AS TR ON P.CONFIGURATION_NAME = TR.CONFIGURATION_NAME  WHERE PRC_ID = :I_PROCESS_ID;    

INSERT INTO "CDS_DS.T_PRC_RULES"(PRC_ID,RULE_NAME,RULE_EXPRESSION,RULE_DESCRIPTION,RULE_PRIORITY) 
SELECT :I_PROCESS_ID AS PRC_ID, RULE_NAME,RULE_EXPRESSION,RULE_DESCRIPTION,RULE_PRIORITY FROM "CDS_DS.T_RULES" WHERE RULE_NAME IN 
(SELECT RS.RULE_NAME FROM "CDS_DS.T_RULESETS" RS INNER JOIN :TAB_RULESET C ON RS.RULESET_NAME = C.RULESET_NAME  );



end