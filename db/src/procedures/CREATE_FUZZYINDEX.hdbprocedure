PROCEDURE "CREATE_FUZZYINDEX" ( IN I_CONFIGURATION_NAME NVARCHAR(100) )
   LANGUAGE SQLSCRIPT
   SQL SECURITY DEFINER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
DECLARE invalid_input CONDITION FOR SQL_ERROR_CODE 10001;
DECLARE invalid_entity_group CONDITION FOR SQL_ERROR_CODE 10002;
/*
-- DERIVE THE CONFIGURATION FROM PROCESS 
declare configurations NVARCHAR(100) array;
declare column_names nvarchar(100) array;
DECLARE COLUMN_NAME NVARCHAR(200);
DECLARE full_text_name NVARCHAR(200);
declare create_full_text nvarchar(2000);
T_CONFIG = SELECT CONFIGURATION_NAME,TA_COLUMN FROM "CDS_DS.T_CONFIGURATIONS"  WHERE CONFIGURATION_NAME = :I_CONFIGURATION_NAME;    
configurations = array_agg(:t_config.configuration_name);
column_names  =  array_agg(:t_config.ta_column);
column_name  = 'EXPENSE.'||:column_names[1];
full_text_name = :I_CONFIGURATION_NAME||'_'||:column_names[1];

create_full_text = 'CREATE FULLTEXT INDEX '|| :full_text_name || ' ON "CDS_DS.T_CONCUR_EXPENSES"("'|| :column_name||
'") FAST PREPROCESS OFF ASYNC FLUSH EVERY 1 MINUTES CONFIGURATION '''||:configurations[1]||''' TEXT ANALYSIS ON';  
/*
CREATE FULLTEXT INDEX "TA_REPORT" ON "CDS_DS.T_CONCUR_EXPENSES" ("EXPENSE.REPORT_NAME") FAST PREPROCESS OFF ASYNC FLUSH EVERY 1 MINUTES
CONFIGURATION 'configuration_1'
TEXT ANALYSIS ON; */

-- EXEC :create_full_text;

/*
ENTITIES = SELECT CONFIGURATION_NAME,E.ENTITY_CATEGORY FROM "CDS_DS.T_CONFIGURATIONS" AS C INNER JOIN "CDS_DS.T_ENTITIES" AS E ON C.CONFIGURATION_NAME = :configurations[1] ;

INSERT INTO "CDS_DS.T_DISPOSITIONS"( DISPOSITION_ID,"EXPENSE_KEY.REPORT_ID","EXPENSE_KEY.ALLOCATION_KEY",DISPOSITION_ENTITY,DISPOSITION_REASON,PRC_ID,TA_COLUMN)
SELECT SYSUUID AS DISPOSITION_ID,TE."EXPENSE_KEY.REPORT_ID",TE."EXPENSE_KEY.ALLOCATION_KEY",C.ENTITY_CATEGORY,TE.TA_TOKEN,:I_PROCESS_ID AS PRC_ID,'REPORT_NAME' AS TA_COLUMN FROM (SELECT  I."EXPENSE_KEY.REPORT_ID",I."EXPENSE_KEY.ALLOCATION_KEY",I.TA_TYPE,I.TA_TOKEN  FROM "$TA_TA_REPORT" AS I inner join "CDS_DS.V_PROC_EXPENSES" AS E ON I."EXPENSE_KEY.REPORT_ID" = E.REPORT_ID AND 
I."EXPENSE_KEY.ALLOCATION_KEY" = E.ALLOCATION_KEY   WHERE E.PRC_ID = :I_PROCESS_ID ) AS TE INNER JOIN  :ENTITIES as C ON TE.TA_TYPE = C.ENTITY_CATEGORY; 
*/

declare entity_groups NVARCHAR(100) array;
declare sub_group_entity NVARCHAR(100) default '';
declare i INTEGER ;
declare J INTEGER ;
declare subgroup_keyword NVARCHAR(20) default '#subgroup ';
declare group_keyword NVARCHAR(20) default '#group ';
declare subgroup_str NVARCHAR(1000) default '';
declare group_str NVARCHAR(5000)  default '';
declare text_rule NVARCHAR(5000)  default '';
declare text_rule_ NVARCHAR(5000)  default '';
declare _group NVARCHAR(1000) default '';
declare carriage_return NVARCHAR(2);
declare entity NVARCHAR(1000) default '';
declare _configuration blob;
declare create_table NVARCHAR(1000);
declare insert_string NVARCHAR(1000);
declare fuzzy_table_name nvarchar(100);
declare delete_table nvarchar(1000);

SELECT BINTOSTR( HEXTOBIN('0D0A') ) INTO carriage_return FROM dummy;

T_CONF_ENTITIES = SELECT CONFIGURATION_NAME,ENTITY_GROUP FROM "CDS_DS.T_CONFIGURATIONS"  WHERE CONFIGURATION_NAME = :I_CONFIGURATION_NAME;

IF  IS_EMPTY(:T_CONF_ENTITIES) THEN
	SIGNAL invalid_input  SET MESSAGE_TEXT = 'Invalid Configuration';
END IF;

entity_groups = array_agg(:T_CONF_ENTITIES.ENTITY_GROUP);

-- if the table exists dont create , Just delete the data and reinsert it
fuzzy_table_name = :I_CONFIGURATION_NAME||'_FUZZY_INDEX';
TAB_EXIST = SELECT * FROM M_TABLES WHERE TABLE_NAME = :fuzzy_table_name  AND SCHEMA_NAME = CURRENT_SCHEMA;
IF(IS_EMPTY(:TAB_EXIST)) THEN
	create_table := 'CREATE COLUMN TABLE '||:fuzzy_table_name||'(
		"EXPENSE_KEY.REPORT_ID" NVARCHAR(64) NOT NULL,
		"EXPENSE_KEY.ALLOCATION_KEY" BIGINT NOT NULL,
		"TA_RULE" NVARCHAR(200),
		"TA_COUNTER" BIGINT,
		"TA_TOKEN" TEXT,
		"TA_LANGUAGE" NVARCHAR(2),
		"TA_TYPE" NVARCHAR(100),
		"TA_CREATED_AT" LONGDATE,
		"TA_SCORE" BIGINT )';
	exec :create_table;
ELSE 
	delete_table := 'Delete from '||:fuzzy_table_name;
	exec :delete_table;
end if;
-- Create the fuzzy index table
i := 1;
j := 1;
FOR i IN 1 .. CARDINALITY(:entity_groups) DO
	T_ENTITIES  = SELECT * FROM  "CDS_DS.T_ENTITIES" WHERE ENTITY_GROUP = :entity_groups[i];
	IF  IS_EMPTY(:T_ENTITIES) THEN
		SIGNAL invalid_entity_group  SET MESSAGE_TEXT = 'Invalid Entity Group'||:entity_groups[i]||'';	
	END IF;
	
	FOR J in 1 .. RECORD_COUNT(:T_ENTITIES) DO
		/*
		IF ( instr(:T_ENTITIES.ENTITY_NAME[J],'<') = 0 ) THEN
			entity = '<'||:T_ENTITIES.ENTITY_NAME[J]||'>';
		ELSE
		*/
		entity = :T_ENTITIES.ENTITY_NAME[J];
	
		--	'insert into'|| :I_CONFIGURATION_NAME||'_FUZZY_INDEX("EXPENSE_KEY.REPORT_ID","EXPENSE_KEY.ALLOCATION_KEY",TA_TOKEN,"TA_TYOE,TA_SCORE)' 
		insert_string :=		'insert into '|| :I_CONFIGURATION_NAME||'_FUZZY_INDEX("EXPENSE_KEY.REPORT_ID","EXPENSE_KEY.ALLOCATION_KEY",TA_TOKEN,TA_TYPE,TA_SCORE,TA_RULE)select "EXPENSE_KEY.REPORT_ID","EXPENSE_KEY.ALLOCATION_KEY",HIGHLIGHTED('||:I_CONFIGURATION_NAME||') as TA_TOKEN,'''||:ENTITY||
		''' as TA_TYPE ,TO_DECIMAL(SCORE(),3,2) AS TA_SCORE,''Fuzzy'' as TA_RULE from TA_CONCUR_EXPENSES WHERE CONTAINS('||:I_CONFIGURATION_NAME||', '''||:entity||''', FUZZY(0.8,''similarCalculationMode=search''))';
		exec :insert_string;
		/*
	END IF;
	IF (J = 1) THEN
	sub_group_entity =  :entity ;
	ELSE
		sub_group_entity =  :sub_group_entity||'|'||:entity ;
	END IF;
*/
	END FOR;
	/*
	subgroup_str = :subgroup_keyword || :entity_groups[i] || '_SG: '|| :sub_group_entity||carriage_return;
--	_group = '#'||:subgroup_str||CHAR(13);
	group_str = :group_keyword||:entity_groups[i]||': %('||:entity_groups[i]||'_SG)'||carriage_return;
	text_rule_ = :subgroup_str||:group_str;
	
	IF (i=1) THEN
	text_rule = :text_rule_;
	else
	text_rule = :text_rule || :text_rule_;
	END IF;
	*/
END FOR;


---_CONFIGURATION := 	:GROU
--CALL TEXT_CONFIGURATION_CREATE_2(CURRENT_SCHEMA, :I_CONFIGURATION_NAME||'_Rule', 'hdbtextrule',
--:text_rule_);




end